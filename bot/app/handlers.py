from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import aiohttp
from app.config import Config
from loguru import logger

API_URL = f"http://localhost"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_CATEGORY, ENTERING_QUERY = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    [["–ë—Ä–µ–Ω–¥—ã", "–í–∫—É—Å—ã"]],
    resize_keyboard=True,
    one_time_keyboard=True
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_menu_keyboard
    )
    return SELECTING_CATEGORY


async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_choice = update.message.text.lower()
    context.user_data['category'] = user_choice

    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ENTERING_QUERY


async def send_table(update: Update, data: list, is_brands: bool):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã."""
    if not data:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    header = "üèÜ –¢–û–ü –ë–†–ï–ù–î–û–í üèÜ" if is_brands else "üçè –¢–û–ü –í–ö–£–°–û–í üçè"
    rows = []
    for i, item in enumerate(data, 1):
        if is_brands:
            row = f"{i}. *{item['–ë—Ä–µ–Ω–¥']}* \n –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞: `{item['–ù–∞–∑–≤–∞–Ω–∏–µ_–≤–∫—É—Å–∞']}` \n  –†–µ–π—Ç–∏–Ω–≥: `{item['–†–µ–π—Ç–∏–Ω–≥']}`"
        else:
            row = f"{i}. *{item['–í–∫—É—Å']}* \n   –ë—Ä–µ–Ω–¥: `{item['–ë—Ä–µ–Ω–¥']}` \n –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞: `{item['–ù–∞–∑–≤–∞–Ω–∏–µ_–≤–∫—É—Å–∞']}` \n  –†–µ–π—Ç–∏–Ω–≥: `{item['–†–µ–π—Ç–∏–Ω–≥']}`"
        rows.append(row)
    
    await update.message.reply_text(
        f"{header}\n" + "\n".join(rows),
        parse_mode="Markdown"
    )


async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    logger.info(f"–ó–∞–ø—Ä–æ—Å: {query}")

    user_choice = context.user_data['category'].lower()
    print(user_choice)
    print(query)
    try:
        async with aiohttp.ClientSession() as session:
            if user_choice == "–±—Ä–µ–Ω–¥—ã":
                async with session.get(f"{API_URL}/brands/{query}") as resp:
                    if resp.status == 200:
                        await send_table(update, await resp.json(), is_brands=True)
                    else:
                        await update.message.reply_text(
                            f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {resp.status}"
                        )
            elif user_choice == "–≤–∫—É—Å—ã":
                async with session.get(f"{API_URL}/flavors/{query}") as resp:
                    if resp.status == 200:
                        await send_table(update, await resp.json(), is_brands=False)
                    else:
                        await update.message.reply_text(
                            f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {resp.status}"
                        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}"
        )

    # async with aiohttp.ClientSession(trust_env=True) as session:
    #     if user_choice == "–±—Ä–µ–Ω–¥—ã":
    #         # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å API-–∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–æ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    #         await update.message.reply_text(
    #             "–ó–∞–ø—Ä–æ—Å –ø–æ –±—Ä–µ–Ω–¥–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–æ—Ç —Å–ø–∏—Å–æ–∫...",
    #             reply_markup=ReplyKeyboardRemove()
    #         )
    #         # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
    #         async with session.get(f"{API_URL}/flavors/{query}") as resp:
    #         # if resp.status == 200:
    #             await send_table(update, await resp.json(), is_brands=False)
    #             return
    #     elif user_choice == "–≤–∫—É—Å—ã":
    #         await update.message.reply_text(
    #             "–ó–∞–ø—Ä–æ—Å –ø–æ –≤–∫—É—Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–æ—Ç —Å–ø–∏—Å–æ–∫...",
    #             reply_markup=ReplyKeyboardRemove()
    #         )
    #         async with session.get(f"{API_URL}/brands/{query}") as resp:
    #             # if resp.status == 200:
    #             await send_table(update, await resp.json(), is_brands=True)
    #             return
    #         # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–∫—É—Å–æ–≤
    #     else:
    #         await update.message.reply_text(
    #         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.",
    #         reply_markup=main_menu_keyboard
    #         )
    return ConversationHandler.END

        # try:
        #     # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –≤–∫—É—Å
        #     async with session.get(f"{API_URL}/brands/{query}") as resp:
        #         if resp.status == 200:
        #             await send_table(update, await resp.json(), is_brands=True)
        #             return
        #
        #     # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –±—Ä–µ–Ω–¥
        #     async with session.get(f"{API_URL}/flavors/{query}") as resp:
        #         if resp.status == 200:
        #             await send_table(update, await resp.json(), is_brands=False)
        #             return
        #
        #     await update.message.reply_text("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –±—Ä–µ–Ω–¥–æ–≤, –Ω–∏ –≤–∫—É—Å–æ–≤")
        # except Exception as e:
        #     logger.error(f"–û—à–∏–±–∫–∞: {e}")
        #     await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def setup_handlers(app):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)
            ],
            ENTERING_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_query)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_query))